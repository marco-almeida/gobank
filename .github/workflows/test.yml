name: Run unit tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  MYBANK_ENV: testing

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16.3-alpine3.19
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: $${{ secrets.POSTGRES_DB }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/
          which migrate

      - name: Run migrations
        run: migrate -path internal/postgresql/migrations -database postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?sslmode=disable -verbose up

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Create testing.env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> testing.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> testing.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> testing.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> testing.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> testing.env

      - name: Run coverage[![codecov](https://codecov.io/gh/MarioCarrion/todo-api-microservice-example/branch/main/graph/badge.svg)](https://codecov.io/gh/MarioCarrion/todo-api-microservice-example)
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3